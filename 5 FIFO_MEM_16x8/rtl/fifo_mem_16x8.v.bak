module fifo_mem_16x8 #(parameter MEM_WIDTH =  16;
                        parameter MEM_DEPTH =  8;
                        parameter ADDR_SIZE =  3;)
                        (data_out,data_count,empty,full,overflow,underflow
                        clk,reset,rd_en,wr_en,data_in);
    


    output reg [MEM_WIDTH - 1:0] data_out;
    output reg [ADDR_SIZE-1:0] data_count = 0;
    output reg empty = 0;
    output reg full = 0;
    output reg overflow = 0;
    output reg underflow = 0;

    reg [MEM_WIDTH-1:0] FIFO [MEM_DEPTH -1:0];

    input [MEM_WIDTH - 1:0] data_in;
    input clk,reset,rd_en,wr_en;


    always @(posedge clk)
    begin
        if(rst)
            begin
                for(i = 0; i<MEM_DEPTH; i = i+ 1)
                    FIFO[i] = 0;
            end
        else if(wr_en)
            begin
                if(full == 1)
                    overflow <= 1;
                else
                    begin
                        FIFO[data_count] <= data_in;
                        data_count = data_count + 1;
                    end
            end
        else if(rd_en)
            begin 
                if(empty == 1)
                    underflow <=1;
                else
                    begin
                        data_out <= FIFO[data_count];
                        data_count = data_count - 1;
                    end
            end
                    

        if(data_cout >= MEM_DEPTH)
            begin
                full <= 1;
                empty <= 0;
            end
        else if(data_count <= 0)
            begin
                full <= 0;
                empty <= 1;
            end
        else
            begin
                overflow <=0;
                underflow <=0;
                full <= 0;
                empty <= 0;
            end
    end

endmodule
    
